---
- hosts: barman
  become: true
  become_method: sudo
  become_user: barman
  tasks: 
    - name: copy postgresql public key into authorized_keys
      copy:
        src: /tmp/master/var/lib/postgresql/.ssh/id_rsa.pub
        dest: /var/lib/barman/.ssh/authorized_keys
        mode: 0600

    - name: add standby1's public key into authorized_keys
      lineinfile:
        dest: /var/lib/barman/.ssh/authorized_keys
        line: "{{ lookup('file', '/tmp/standby1/var/lib/postgresql/.ssh/id_rsa.pub') }}"

    - name: add standby2's public key into authorized_keys
      lineinfile:
        dest: /var/lib/barman/.ssh/authorized_keys
        line: "{{ lookup('file', '/tmp/standby2/var/lib/postgresql/.ssh/id_rsa.pub') }}"

    - name: create config for ssh
      file: 
        path: /var/lib/barman/.ssh/config
        state: touch

    - name: add standby1's ip address to config
      lineinfile:
        dest: /var/lib/barman/.ssh/config
        line: "Host {{ hostvars[groups['standby1'][0]]['hostname'] }}"

    - name: add standby2's ip address to config
      lineinfile:
        dest: /var/lib/barman/.ssh/config
        line: "Host {{ hostvars[groups['standby2'][0]]['hostname'] }}"

    - name: ignore ssh host key checking
      lineinfile:
        dest: /var/lib/barman/.ssh/config
        line: 'StrictHostKeyChecking no'
    
    - name: check if host is already registered for wal streaming
      command: barman check master
      register: master_barman_status
      ignore_errors: true

    - name: create replication slot
      command: barman receive-wal --create-slot {{ hostvars[groups['master'][0]]['hostname'] }}
      when: '"receive-wal running: FAILED" in master_barman_status.stdout'

    - name: run barman cron
      command: barman cron

    - name: create a crontab to run barman cron every minute
      cron:
        name: "barman cron in every minute"
        minute: "*"
        hour: "*"
        day: "*"
        month: "*"
        weekday: "*"
        job: "/usr/bin/barman cron"

    - name: switch-xlog
      command: barman switch-xlog --force --archive {{ hostvars[groups['master'][0]]['hostname'] }}

    - name: backup master server's data
      command: barman backup {{ hostvars[groups['master'][0]]['hostname'] }}
