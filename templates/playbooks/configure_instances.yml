---
# Copy the google application credentials from gateway to all the replicas
- hosts: gateway
  connection: local
  tasks:
  <[ #replicas ]>
    - name: create a service account credentials file
      command: gcloud beta compute scp {{ lookup('env', 'HOME') }}/.gcloud/google_application_credentials.json <[ hostname ]>:{{ lookup('env', 'HOME') }} --zone us-central1-f
  <[ /replicas ]>

# Configuring all replicas. Install dependencies and configure hosts. 
- hosts: replicas
  tasks:
    - name: add gcsfuse to apt sources list
      apt_repository:
        repo: deb http://packages.cloud.google.com/apt gcsfuse-jessie main
        state: present
        filename: /etc/apt/sources.list.d/gcsfuse.list

    - name: import the repository signing key
      apt_key:
        url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
        state: present

    - name: add postgres repository into source list
      apt_repository:
        repo: deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main
        state: present
        filename: '/etc/apt/sources.list.d/pgdg.list'

    - name: import the repository signing key
      apt_key:
        url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
        state: present

    - name: install prerequisites
      apt:
        update_cache: yes
        name: "{{ item }}"
      with_items: 
        - dbus
        - rsync
        - gcsfuse
        - unzip
        - postgresql-9.6
        - postgresql-server-dev-9.6
        - postgresql-9.6-repmgr
        - python3-pip
        - python-pip
        - python3-dev
        - python-dev
        - build-essential 
        - libssl-dev 
        - libffi-dev
        - lzop
        - pv
    
    - name: install python modules
      pip:
        name: "{{ item }}"
      with_items:
        - pexpect
        - psycopg2

    - name: upgrade pip3 and six to get latest version
      pip:
        name: "{{ item }}"
        state: latest
        executable: pip3
      with_items:
        - pip
        - six

    - name: install wal-e
      pip:
        name: wal-e[google]
        executable: pip3

    - name: add new hostname in /etc/hosts
      lineinfile:
        dest: /etc/hosts
        line: '127.0.0.1 {{ hostname }} {{ hostname }}' 

    - template: 
        src: ../ip.j2
        dest: /var/lib/ip_tmp

    - name: get the content inside the ip_tmp file
      shell: "cat /var/lib/ip_tmp"
      register: ip

    - name: put the ip addresses of all machines into hosts file
      lineinfile:
        dest: /etc/hosts
        line: "{{ ip.stdout }}"

    - block: 
      - name: generate ssh keys
        expect: 
          command: ssh-keygen -t rsa
          responses:
            'Enter file in which to save the key \(/var/lib/postgresql/.ssh/id_rsa\):': "\n"
            'Enter passphrase \(empty for no passphrase\):': "\n"
            'Enter same passphrase again:': "\n"
          creates: /var/lib/postgresql/.ssh/id_rsa
      - name: fetch the public key to store in the local box
        fetch:
          src: /var/lib/postgresql/.ssh/id_rsa.pub
          dest: /tmp
      become: true
      become_method: sudo
      become_user: postgres

    - name: add postgres as a sudoer
      lineinfile:
        dest: /etc/sudoers.d/postgres
        line: >
          postgres ALL=(root) NOPASSWD: /bin/systemctl start postgresql, 
          /bin/systemctl stop postgresql,
          /bin/systemctl restart postgresql,
          /bin/systemctl reload postgresql,
          /usr/bin/pg_ctlcluster 9.6 main promote
        create: yes
        state: present
        mode: 0600

    - name: copy postgresql.conf file
      copy:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/{{ ansible_hostname }}/postgresql.conf"
        dest: /etc/postgresql/9.6/main/postgresql.conf

    - name: copy pg_hba.conf file
      copy:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/{{ ansible_hostname }}/pg_hba.conf"
        dest: /etc/postgresql/9.6/main/pg_hba.conf

    - name: copy repmgr.conf file
      copy:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/config/{{ ansible_hostname }}/repmgr.conf"
        dest: /etc/repmgr.conf
    
    - name: copy utility scripts expected by repmgr.conf
      copy:
        src: "{{ lookup('env', 'HOME') }}/.dbadmin/scripts/{{ ansible_hostname }}/" # copy only contents inside
        dest: /usr/local/bin
        owner: postgres
        group: postgres
        mode: 0740

    - name: create /etc/wal-e.d/env folder
      file:
        path: /etc/wal-e.d/env/
        state: directory

    - name: copy the google application credentials to /etc/wal-e.d/env/
      copy:
        src: "{{ lookup('env', 'HOME') }}/google_application_credentials.json"
        dest: /etc/wal-e.d/env/google_application_credentials.json
        remote_src: true
        group: postgres

    - name: change directory ownership, group and mode
      file:
        path: /etc/wal-e.d/
        owner: root
        group: postgres
        mode: 0750
    
    - name: restart server
      service:
        name: postgresql
        state: restarted

    - name: reload configuration files
      service:
        name: postgresql
        state: reloaded

# Registering the master on repmgr.
- hosts: master
  tasks:
    - name: create user repmgr
      postgresql_user:
        name: repmgr
        role_attr_flags: SUPERUSER,CREATEROLE,CREATEDB

    - name: create database repmgr
      postgresql_db:
        name: repmgr
        owner: repmgr

    - name: find if host is already registered with repmgr
      command: psql -U repmgr -d repmgr -c "copy(select type from repmgr_replicas.repl_nodes where name = '{{ ansible_hostname }}') to stdout with csv;"
      register: host_replica_type
      ignore_errors: True
      tags: debug
    
    - name: register as master
      command: repmgr -f /etc/repmgr.conf master register
      become: true
      become_user: postgres
      become_method: sudo
      when: '"master" not in host_replica_type.stdout'

    - block:
      - name: push a base backup to Google Cloud Storage
        shell: >
          WALE_GS_PREFIX="gs://teststudiobackup/" GOOGLE_APPLICATION_CREDENTIALS=/etc/wal-e.d/env/google_application_credentials.json
          wal-e backup-push /var/lib/postgresql/9.6/main/

      - name: start repmgrd
        shell: >
          repmgrd -f /etc/repmgr.conf -d --verbose >> 
          /var/log/postgresql/postgresql-9.6-main.log 2>&1
      become: true
      become_user: postgres
      become_method: sudo


# Configure standby as standby instances on repmgr. 
- hosts: standby
  tasks:   
    - name: stop standby server
      service:
        name: postgresql
        state: stopped

    - name: remove postgresql data folder to prepare for standby clone
      file:
        path: /var/lib/postgresql/9.6/main
        state: absent

    - name: clone standby
      command: >
        repmgr -h <[ master.hostname ]> -d repmgr
        -D /var/lib/postgresql/9.6/main -f /etc/repmgr.conf standby clone
      become: true
      become_user: postgres
      become_method: sudo

    - name: start server
      service:
        name: postgresql
        state: started

    - name: reload configuration files
      service:
        name: postgresql
        state: reloaded
    
    - name: find if host is already registered with repmgr
      command: psql -U repmgr -d repmgr -c "copy(select type from repmgr_replicas.repl_nodes where name = '{{ ansible_hostname }}') to stdout with csv;"
      register: host_replica_type
      ignore_errors: true
      tags: debug
      become: true
      become_user: postgres
      become_method: sudo

    - block:
      - name: register as standby
        command: repmgr -f /etc/repmgr.conf standby register
        when:  '"standby" not in host_replica_type.stdout'

      - name: pause to let wal streaming start
        pause:
          seconds: 30

      - name: start repmgrd
        shell: >
          repmgrd -f /etc/repmgr.conf -d --verbose >> 
          /var/log/postgresql/postgresql-9.6-main.log 2>&1
      become: true
      become_user: postgres
      become_method: sudo
